{"version":3,"sources":["components/card-list/card-list.js","components/search-box/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["CardList","props","className","monsters","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","filterFunction","searchField","x","name","toLowerCase","includes","storeFilterValue","event","setState","target","value","state","finalFilteredMonster","fetch","then","response","json","users","this","filteredMonster","length","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAoBeA,G,kBAhBA,SAACC,GAEZ,OAAO,yBAAKC,UAAU,aAEjBD,EAAME,SAASC,KAAI,SAAAC,UCGbC,G,MARC,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aAC1B,OACI,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC8ElDG,E,kDAzEb,aAAc,IAAD,8BACX,gBAmBDC,eAAe,SAACC,GAEf,OAAO,SAASC,GACd,OAAOA,EAAEC,KAAKC,cAAcC,SAASJ,EAAYG,iBAAiBH,IAvBzD,EA0BbK,iBAAiB,SAACC,GAGhB,EAAKC,SAAS,CAACP,YAAYM,EAAME,OAAOC,SA3BxC,EAAKC,MAAM,CAOTpB,SAAS,GACTU,YAAY,KACZW,qBAAqB,IAXZ,E,gEAcO,IAAD,OACjBC,MAAM,8CACLC,MACC,SAAAC,GAAQ,OAAEA,EAASC,UAClBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACjB,SAAS0B,S,+BAoBlC,IAAD,EACqBC,KAAKP,MAA3BpB,EADC,EACDA,SAASU,EADR,EACQA,YAEZkB,EAAgB5B,EAQlB,OAPa,OAAZA,GAAuC,IAAnBA,EAAS6B,QAA8B,OAAfnB,IAE9CkB,EAAiB5B,EAAS8B,OAAOH,KAAKlB,eAAeC,KAMlD,yBAAKX,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWK,YAAa,iBAAiBC,aAAcsB,KAAKZ,mBAS5D,kBAAC,EAAD,CAAUf,SAAU4B,S,GA9DRG,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5455c07.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-list.styles.css'\r\nimport Card from '../card/card-component';\r\n\r\nconst CardList=(props)=>{\r\n\r\n    return(<div className=\"card-list\">\r\n        {/* {props.children} */}\r\n        {props.monsters.map(monster=>\r\n    //     <h1 key={monster.name}>\r\n    //     {monster.name}\r\n    //   </h1>\r\n    <Card key ={monster.id} monster={monster}/>\r\n      )}\r\n        \r\n\r\n    </div>)\r\n\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox=({placeholder,handleChange})=>{\r\n    return(\r\n        <input type='search' placeholder={placeholder} onChange={handleChange}/>\r\n    \r\n    )\r\n}\r\n   \r\n\r\nexport default SearchBox;","import React,{Component} from 'react';\n\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box.component';\n\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n     \n      // monsters:[\n      //   {name:'Frankenstein',id:'bb'},\n      //   {name:'Dracula',id:'cc'},\n      //   {name:'Zombie',id:'dd'},\n      // ]\n      monsters:[],\n      searchField:null,\n      finalFilteredMonster:[]\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(\n      response=>response.json())\n      .then(users=>this.setState({monsters:users}))\n  }\n   filterFunction=(searchField)=>{\n    \n    return function(x){\n      return x.name.toLowerCase().includes(searchField.toLowerCase())||!searchField;\n    }\n  }\n  storeFilterValue=(event)=>{\n   \n    \n    this.setState({searchField:event.target.value});\n    /**Value is set asynchroniously above*/\n\n    // this.setState({searchField:event.target.value},()=>{\n    //   console.log('State value synchronous',this.state.searchField)\n    // });\n\n\n  }\nrender(){\nconst {monsters,searchField}=this.state;\n\nlet filteredMonster=monsters;\nif(monsters !==null && monsters.length !==0 && searchField !==null){\n \n filteredMonster =monsters.filter(this.filterFunction(searchField))\n\n  \n}\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder ='Search Monster' handleChange={this.storeFilterValue}/>\n      {/* <CardList name=\"Kingsuk\">\n      \n\n      {this.state.monsters.map(monster=><h1 key={monster.name}>\n        {monster.name}\n      </h1>)}\n      </CardList> */}\n      {/* <CardList monsters={this.state.monsters} /> */}\n      <CardList monsters={filteredMonster} />\n\n\n      \n \n    </div>\n  );\n\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}